#!/bin/sh
#
# Damicore main script 
# 
# Copyright (c) 2021 - Monaco F. J. <monaco@usp.br>
# Adapted from original script by several contributors from the
# LCR ICMC-USP - https://sites.google.com/usp.br/lcr

# This script and the external program it makes use of have been
# collected from several sources, by different authors. The present
# implementation is just an ad hoc attempt to put everything together
# in a working ensemble. A full rewrite of this piece of software
# is arguably (and strongly) advisable. 

# Process command-line option

PROGRAM="$(basename $0)"
USAGE="                                                                         
   $PROGRAM [options] <directory>    \n
                                     \n
   options                           \n
                                     \n
   -n          do not open figtree   \n
   -h          this help information \n
   -d	       stop after distance matrix\n
   -t	       stop after phylogeny tree\n
"

show_tree=1 			# Show tree by the end

dist_only=0;                    # Stop after distance matrix
tree_only=0;			# Stop after tree

if [ $# -lt 1 ]; then
    echo $USAGE
    exit 1
fi

while getopts "nhdt" o; do
    case "${o}" in
        n)
	    show_tree=0
            ;;
	h)  echo $USAGE
	    exit 0
	    ;;
	d)
	    dist_only=1
	    ;;
	t)
	    tree_only=1
	    ;;
        *)
            echo $USAGE
	    exit 1
            ;;
    esac
done
shift $((OPTIND-1))

# Where programs are located (origin)

BIN_DIR=$(dirname $0)

# Selected input and output dir
# For now, output is generated in the current directory.

INPUT_DIR=$1
OUTPUT_DIR=$PWD

# Program that calculates the distance matrix

DISTANCE_PROG="${BIN_DIR}/ncd"
DISTANCE_ARGS="ppmd" # ppmd | zlib 

# Number of threads available for DISTANCE_PROG

NTHREADS=$(nproc)

# Output of DISTANCE_PROG

DISTANCE_OUTPUT="distmatrix.txt"

# Program to convert the output generated by DISTANCE_PROGR into
# the format required by TREE_PROG input.

DISTANCE_CONV_PROG="${BIN_DIR}/community-conv"

# Program to detect communities in the tree.

COMMUNITY_PROG="${BIN_DIR}/community"

# Program to visualize the tree

VIEW_TREE_PROG="${BIN_DIR}/figtree"

# Program to create a tree from the distance matrix.

TREE_PROG="$BIN_DIR/neighbor"

# Confirm operation
echo ""
echo "Files will be created into ${OUTPUT_DIR}. "
#echo -n "Are you sure? [y,n] "

# echo "Create $OUTPUT_DIR"

# if ! test -d $OUTPUT_DIR; then
#     mkdir -p $OUTPUT_DIR
# fi



# read op
# if [ $op != "y" && $op != "Y" ] ; then
# 	echo "Abort."
# 	echo
# 	exit 1
# fi

#
# Generate distance matrix
#

echo "Executing NCD in $INPUT_DIR"
echo "Using compressor: $DISTANCE_ARGS"
echo "Outputfile: $DISTANCE_OUTPUT"

echo "$DISTANCE_PROG -c $DISTANCE_ARGS -t $NTHREADS -d $INPUT_DIR -o - > $DISTANCE_OUTPUT"

#NTHREADS=1

$DISTANCE_PROG -c $DISTANCE_ARGS -t $NTHREADS -d $INPUT_DIR -o - > $DISTANCE_OUTPUT


if [ $? != 0 ]; then
	echo "Something went wrong... Abort."
	echo
	exit 1
fi

if test $dist_only -eq 1 ; then
   exit 0;
fi
   
echo "Converting files..."
echo -n "${DISTANCE_OUTPUT}..."
$DISTANCE_CONV_PROG $x $DISTANCE_OUTPUT ${DISTANCE_OUTPUT}.m



#
# Generate tree
#

echo "Executing Neighbor-Joining..."
phargs=$(mktemp)
cat << EOF > $phargs
${DISTANCE_OUTPUT}.m
L
Y
EOF
$TREE_PROG < $phargs > /dev/null

outname=$(basename $INPUT_DIR)
mv outfile outfile-$outname
mv outtree outtree-$outname

rm $phargs
# rm ${DISTANCE_OUTPUT}.m

if test $tree_only -eq 1 ; then
   exit 0;
fi


# Identify communities

echo "Executing Fast Newman... ($outname)"
echo
outcluster=clusters-of-$outname
$COMMUNITY_PROG outfile-$outname > $outcluster

mkdir tmp
x=0
for i in $(cat $outcluster)
   do
      if [ $x -eq 0  ] ; then
         a=$i 
         x=$(($x+1))
      else
         echo $i > tmp/$a    
         x=0
      fi
   done

k=0
cp outtree-$outname output$k
for a in $(ls tmp/*)
   do 
      a=$(echo $a | sed 's/tmp\///g')
      j="$(cat tmp/$a) $a"
      j=$(echo $j | sed 's/,//g')
      echo "sed 's/$a/$j/g' output$k" > tmp_command
      chmod +x tmp_command
      k=$(($k+1))
      ./tmp_command  > output$k
   done
cp output$k outtree-$outname-clusters-annotated
rm output*
rm tmp_command
rm tmp/*
rmdir tmp/

if [ $show_tree -eq 1 ]; then
	echo "Executing FigTree..."
	$VIEW_TREE_PROG outtree-$outname-clusters-annotated
fi

