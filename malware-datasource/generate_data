#!/usr/bin/env python3
import os
import shutil
from datetime import date
import argparse

from nastyware_analyser.core.request import TEMPORARY_DIRECTORY, request_pe_files
from nastyware_analyser.core.export import export_dataset, export_imports
from nastyware_analyser.core.file_operation import remove_empty_imports, slice_filenames
from nastyware_analyser.core.stats import check_empty_imports

from nastyware_analyser.utils.daterange import daterange

SAMPLES_DIRECTORY = './samples/'
IMPORTS_DIRECTORY = './imports/'
TEMPORARY_DIRECTORY = './tmp/'

DEFAULT_DATASET_FILENAME = 'dataset.csv'

DAMICORE_VERSION_C = 'c'
DAMICORE_VERSION_PYTHON = 'python'

MALWARE_BAZAAR = 'malware_bazaar'
URL_HAUS = 'url_haus'

if __name__== '__main__':
    parser = argparse.ArgumentParser(description='Nastyware Analyser')

    parser.add_argument('-d', '--download', action='store_true', help='Download samples')
    parser.add_argument('--from_date', help='From date (YYYY-MM-DD)')
    parser.add_argument('--to_date', type=str, help='To date (YYYY-MM-DD)')
    parser.add_argument('-e', '--export_dataset_information', action='store_true', help='Export dataset information')
    parser.add_argument('--export_dataset_filename', type=str, help='Export dataset filename')
    parser.add_argument('-c', '--clear', action='store_true', help='Clear generated files and directories')
    parser.add_argument('--check_empty_imports', action='store_true', help='Print information about empty imports')
    parser.add_argument('--damicore_version', type=str, help='Damicore version', choices=[DAMICORE_VERSION_C, DAMICORE_VERSION_PYTHON], default=DAMICORE_VERSION_C)
    parser.add_argument('-s', '--source', type=str, help='Source', choices=[MALWARE_BAZAAR, URL_HAUS], default=MALWARE_BAZAAR)
    parser.add_argument('-i', '--use_imports', action='store_true', help='Use imports folders as it is')

    args = parser.parse_args()

    if args.download and (args.from_date is None or args.to_date is None):
        parser.error("--download requires --from_date and --to_date.")

    if args.clear:
        sure = input("Are you sure you want to clear generated files and directories ? (y/n) ")
        if sure == 'y':
            if os.path.exists(IMPORTS_DIRECTORY):
                shutil.rmtree(IMPORTS_DIRECTORY)
            if os.path.exists(SAMPLES_DIRECTORY):
                shutil.rmtree(SAMPLES_DIRECTORY)
            if os.path.exists(TEMPORARY_DIRECTORY):
                shutil.rmtree(TEMPORARY_DIRECTORY)
            if os.path.exists(DEFAULT_DATASET_FILENAME):
                os.remove(DEFAULT_DATASET_FILENAME)

    if args.download:
        start_date = date.fromisoformat(args.from_date)
        end_date = date.fromisoformat(args.to_date)
        print('Downloading PE files...')
        for single_date in daterange(start_date, end_date):
            print(f'\rRetrieving files from: {single_date.strftime("%Y-%m-%d")}', end="")
            request_pe_files(date=single_date.strftime("%Y-%m-%d"), output_dir=SAMPLES_DIRECTORY, source=args.source)
        print()

    if args.export_dataset_information:
        print('Exporting dataset information...')
        filename = args.export_dataset_filename if args.export_dataset_filename is not None else DEFAULT_DATASET_FILENAME
        export_dataset(sample_dir=SAMPLES_DIRECTORY, output_filename=filename, source=args.source)

    if not args.use_imports:
        print('Exporting function imports...')
        
        export_imports(files_dir=SAMPLES_DIRECTORY, output_dir=IMPORTS_DIRECTORY, malware=True)

    if args.check_empty_imports:
        print('Checking information about empty imports...')
        check_empty_imports(files_dir=IMPORTS_DIRECTORY)

    print('Removing samples with empty imports...')
    remove_empty_imports(IMPORTS_DIRECTORY)

    if args.damicore_version == DAMICORE_VERSION_C:
        print('Using C version of Damicore...')
        slice_filenames(IMPORTS_DIRECTORY)
        os.chdir('./damicore/bin/')
        os.system(f'./damicore ../../{IMPORTS_DIRECTORY}')
        os.chdir('../../')
    elif args.damicore_version == DAMICORE_VERSION_PYTHON:
        print('Using Python version of Damicore...')
        ret = os.system('./damicore-python/damicore.py ./imports/ --ncd-output ./damicore-python/results/ncd-matrix.phylip --format phylip --tree-output ./damicore-python/results/tree.newick --graph-image ./damicore-python/results/tree-image.png --output ./damicore-python/results/final.clusters --compress gzip')
        if ret != 0:
            print('Error while running Damicore')
            os.exit(1)
        os.system('figtree ./damicore-python/results/tree.newick')
