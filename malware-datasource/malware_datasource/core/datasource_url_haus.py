import requests
import pyzipper
import pandas as pd
import sys
import os
import re
import shutil

from malware_datasource.core.datasource import DataSource
from malware_datasource.core.request import download_file

ZIP_PASSWORD = b'infected'
TEMPORARY_DIRECTORY = './tmp'

DOWNLOAD_BASE_URL = 'https://datalake.abuse.ch/urlhaus/daily/'
API_BASE_URL = 'https://urlhaus-api.abuse.ch/v1/payload/'

class DataSourceUrlHaus(DataSource):
    def __init__(self):
        pass

    def request_pe_files(self, date, output_dir):
        if re.match(r'\d{4}-\d{2}-\d{2}', date) is None:
            raise Exception('Invalid date format')

        if not os.path.exists(TEMPORARY_DIRECTORY):
            os.makedirs(TEMPORARY_DIRECTORY)

        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        filename = f'{date}.zip'
        remote_zip_fileurl = f'{DOWNLOAD_BASE_URL}/{filename}'
        local_zip_filepath = f'{TEMPORARY_DIRECTORY}/{filename}'

        download_file(file_url=remote_zip_fileurl, output_filepath=local_zip_filepath)

        with pyzipper.AESZipFile(local_zip_filepath) as zf:
            zf.pwd = ZIP_PASSWORD
            zf.extractall(TEMPORARY_DIRECTORY)

        for filename in os.listdir(TEMPORARY_DIRECTORY):
            print(f'\rMoving {filename}...', end='')

            magic_number = open(f'{TEMPORARY_DIRECTORY}/{filename}', 'rb').read(2)

            if magic_number == b'MZ':
                shutil.move(f'{TEMPORARY_DIRECTORY}/{filename}', f'{output_dir}/{filename}')
            else:
                os.remove(f'{TEMPORARY_DIRECTORY}/{filename}')
        
        os.removedirs(TEMPORARY_DIRECTORY)
    
    def request_information(self, hash):
        data = {
            "query": "get_info",
            "md5_hash": hash
        }

        response = requests.post(API_BASE_URL, data=data, timeout=15)

        if response.status_code != 200:
            print(f'Error: {response.status_code} - {response.reason}')
            sys.exit(1)

        response_json = response.json()

        if 'urls' in response_json:
            del response_json['urls']

        del response_json['query_status']
        
        print(response_json)

        return pd.json_normalize(response_json)
