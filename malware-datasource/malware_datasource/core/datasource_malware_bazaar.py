import requests
import pyzipper
import pandas as pd
import sys
import os
import re
import shutil
from datetime import date

from malware_datasource.core.datasource import DataSource
from malware_datasource.core.request import download_file
from malware_datasource.core.dataset import Dataset
from malware_datasource.utils.directories import TEMPORARY_DIRECTORY

class DataSourceMalwareBazaar(DataSource):
    def __init__(self, malware_source):
        super().__init__(malware_source)

    def request_pe_files(self, date_str, output_dir):
        if re.match(r'\d{4}-\d{2}-\d{2}', date_str) is None:
            raise Exception('Invalid date format')
        
        if date.fromisoformat(date_str) < date.fromisoformat(self.min_date):
            print(f'Error: Date {date_str} is before min_date {self.min_date}')
            sys.exit(1)

        if not os.path.exists(TEMPORARY_DIRECTORY):
            os.makedirs(TEMPORARY_DIRECTORY)

        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        filename = f'{date_str}.zip'
        remote_zip_fileurl = f'{self.download_url}/{filename}'
        local_zip_filepath = f'{TEMPORARY_DIRECTORY}/{filename}'

        download_file(file_url=remote_zip_fileurl, output_filepath=local_zip_filepath)

        with pyzipper.AESZipFile(local_zip_filepath) as zf:
            zf.pwd = self.zip_password.encode()
            zf.extractall(TEMPORARY_DIRECTORY)

        for filename in os.listdir(TEMPORARY_DIRECTORY):
            magic_number = open(f'{TEMPORARY_DIRECTORY}/{filename}', 'rb').read(2)

            if magic_number == b'MZ':
                shutil.move(f'{TEMPORARY_DIRECTORY}/{filename}', f'{output_dir}/{filename}')
            else:
                os.remove(f'{TEMPORARY_DIRECTORY}/{filename}')
        
        os.removedirs(TEMPORARY_DIRECTORY)
    
    def request_json_information(self, hash):
        data = {
            "query": "get_info",
            "hash": hash
        }

        response = requests.post(self.api_url, data=data, timeout=15)

        if response.status_code != 200:
            print(f'Error: {response.status_code} - {response.reason}')
            sys.exit(1)

        response_json = response.json()

        if response_json['query_status'] != 'ok':
            return None

        return response_json['data'][0]

    def request_information(self, hash):
        try:
            dataset = Dataset(source_data=self.request_json_information(hash), source='url_haus')
        except Exception as e:
            return None

        return dataset
