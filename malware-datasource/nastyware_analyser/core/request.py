import requests
import pyzipper
import pandas as pd
import sys
import os
import re
import shutil

MALWARE_BAZAAR = 'malware_bazaar'
URL_HAUS = 'url_haus'

MALWARE_BAZAAR_API_BASE_URL = 'https://mb-api.abuse.ch/api/v1/'
MALWARE_BAZAAR_DOWNLOAD_ROOT_PATH = 'https://datalake.abuse.ch/malware-bazaar/daily'

URL_HAUS_API_BASE_URL = 'https://urlhaus-api.abuse.ch/v1/payload/'
URL_HAUS_DOWNLOAD_ROOT_PATH = 'https://datalake.abuse.ch/urlhaus/daily/'

ZIP_PASSWORD = b'infected'

TEMPORARY_DIRECTORY = './tmp'

def download_file(file_url, output_filepath):
    response = requests.get(file_url)
    with open(output_filepath, 'wb') as f:
        f.write(response.content)

def request_information(hash, source=MALWARE_BAZAAR):
    data = {
        "query": "get_info",
        "hash": hash,           # To cover Malware Bazaar
        "sha256_hash": hash     # To cover URL Haus
    }

    url = MALWARE_BAZAAR_API_BASE_URL if source == MALWARE_BAZAAR else URL_HAUS_API_BASE_URL
    response = requests.post(url, data=data, timeout=15)

    if response.status_code != 200:
        print(f'Error: {response.status_code} - {response.reason}')
        sys.exit(1)

    response_json = response.json()

    if response_json['data'] is not None:
        return pd.json_normalize(response_json['data'])
    else:
        # Remove keys "urls" and "query_status"
        del response_json['urls']
        del response_json['query_status']
        return pd.json_normalize(response_json)


def request_pe_files(date, output_dir, source=MALWARE_BAZAAR):
    if re.match(r'\d{4}-\d{2}-\d{2}', date) is None:
        raise Exception('Invalid date format')

    if not os.path.exists(TEMPORARY_DIRECTORY):
        os.makedirs(TEMPORARY_DIRECTORY)

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    filename = f'{date}.zip'
    remote_zip_fileurl = f'{MALWARE_BAZAAR_DOWNLOAD_ROOT_PATH}/{filename}' if source == MALWARE_BAZAAR else f'{URL_HAUS_API_BASE_URL}/{filename}'
    local_zip_filepath = f'{TEMPORARY_DIRECTORY}/{filename}'

    download_file(file_url=remote_zip_fileurl, output_filepath=local_zip_filepath)

    with pyzipper.AESZipFile(local_zip_filepath) as zf:
        zf.pwd = ZIP_PASSWORD
        zf.extractall(TEMPORARY_DIRECTORY)

    for filename in os.listdir(TEMPORARY_DIRECTORY):
        # if first bytes are "0X4D5A" then it is a PE file
        with open(f'{TEMPORARY_DIRECTORY}/{filename}', 'rb') as f:
            magic_number = f.read(2)

        if magic_number == b'MZ':
            shutil.move(f'{TEMPORARY_DIRECTORY}/{filename}', f'{output_dir}/{filename}')
        else:
            os.remove(f'{TEMPORARY_DIRECTORY}/{filename}')
    
    os.removedirs(TEMPORARY_DIRECTORY)
