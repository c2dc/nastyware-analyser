#!/usr/bin/env python3
import os
import shutil
from datetime import date
import argparse

from malware_datasource.core.export import export_dataset, export_files_imports
from malware_datasource.core.file_operation import remove_empty_imports, slice_filenames
from malware_datasource.core.stats import check_empty_imports
from malware_datasource.core.datasource_malware_bazaar import DataSourceMalwareBazaar
from malware_datasource.core.datasource_url_haus import DataSourceUrlHaus
from malware_datasource.core.datasource import DataSource

from malware_datasource.utils.malware_sources import MalwareSources
from malware_datasource.utils.daterange import daterange
from malware_datasource.utils.directories import SAMPLES_DIRECTORY, IMPORTS_DIRECTORY, TEMPORARY_DIRECTORY

DEFAULT_DATASET_FILENAME = 'dataset.csv'

DAMICORE_VERSION_C = 'c'
DAMICORE_VERSION_PYTHON = 'python'

if __name__== '__main__':
    parser = argparse.ArgumentParser(description='Nastyware Analyser')

    malware_sources = MalwareSources('malware_sources.json')

    parser.add_argument('-d', '--download', action='store_true', help='Download samples')
    parser.add_argument('--from_date', help='From date (YYYY-MM-DD)')
    parser.add_argument('--to_date', type=str, help='To date (YYYY-MM-DD)')
    parser.add_argument('-s', '--source', type=str, choices=malware_sources.choices, default=malware_sources.default, help="Select malware source that will be used")
    parser.add_argument('-e', '--export_dataset', action='store_true', help='Export samples information')
    parser.add_argument('--dataset_filename', type=str, default=DEFAULT_DATASET_FILENAME, help='Specify dataset filename. Format used is CSV.')
    parser.add_argument('--check_empty_imports', action='store_true', help='Print information about samples that have no imports')
    parser.add_argument('--damicore_version', type=str, help='Damicore version', choices=[DAMICORE_VERSION_C, DAMICORE_VERSION_PYTHON], default=DAMICORE_VERSION_PYTHON)
    
    args = parser.parse_args()

    if args.download and (args.from_date is None or args.to_date is None):
        parser.error("--download requires --from_date and --to_date.")

    if os.path.exists(TEMPORARY_DIRECTORY):
        shutil.rmtree(TEMPORARY_DIRECTORY)

    datasource = DataSource(malware_sources.sources[malware_sources.default])

    if args.source == malware_sources.MALWARE_BAZAAR:
        datasource = DataSourceMalwareBazaar(malware_sources.sources[malware_sources.MALWARE_BAZAAR])
    elif args.source == malware_sources.URL_HAUS:
        datasource = DataSourceUrlHaus(malware_sources.sources[malware_sources.URL_HAUS])

    if args.download:
        start_date = date.fromisoformat(args.from_date)
        end_date = date.fromisoformat(args.to_date)
        print('Downloading PE files...')
        for single_date in daterange(start_date, end_date):
            print(f'\rRetrieving files from: {single_date.strftime("%Y-%m-%d")}', end="")
            datasource.request_pe_files(date_str=single_date.strftime("%Y-%m-%d"), output_dir=SAMPLES_DIRECTORY)
        print()

    if args.export_dataset:
        print('Exporting dataset information...')
        filename = args.dataset_filename
        export_dataset(sample_dir=SAMPLES_DIRECTORY, output_filename=filename, datasource=datasource)

      
    export_files_imports(files_dir=SAMPLES_DIRECTORY, output_dir=IMPORTS_DIRECTORY, malware=True)

    if args.check_empty_imports:
        print('Checking information about empty imports...')
        check_empty_imports(imports_dir=IMPORTS_DIRECTORY)

    # TODO: Maybe move to "pe-analyser" module
    # print('Removing samples with empty imports...')
    # remove_empty_imports(IMPORTS_DIRECTORY)

    # if args.damicore_version == DAMICORE_VERSION_C:
    #     print('Using C version of Damicore...')
    #     slice_filenames(IMPORTS_DIRECTORY)
    #     os.chdir('./damicore/bin/')
    #     os.system(f'./damicore ../../{IMPORTS_DIRECTORY}')
    #     os.chdir('../../')
    # elif args.damicore_version == DAMICORE_VERSION_PYTHON:
    #     print('Using Python version of Damicore...')
    #     ret = os.system('./damicore-python/damicore.py ./imports/ --ncd-output ./damicore-python/results/ncd-matrix.phylip --format phylip --tree-output ./damicore-python/results/tree.newick --graph-image ./damicore-python/results/tree-image.png --output ./damicore-python/results/final.clusters --compress gzip')
    #     if ret != 0:
    #         print('Error while running Damicore')
    #         os.exit(1)
    #     os.system('figtree ./damicore-python/results/tree.newick')
